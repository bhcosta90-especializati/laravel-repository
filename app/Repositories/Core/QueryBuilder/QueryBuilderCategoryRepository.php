<?php


namespace App\Repositories\Core\QueryBuilder;


use App\Repositories\Contracts\CategoryRepositoryInterface;
use App\Repositories\Core\BaseQueryBuilderRepository;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

class QueryBuilderCategoryRepository extends BaseQueryBuilderRepository implements CategoryRepositoryInterface
{
    public function create(array $attributes)
    {
        $attributes['url'] = Str::kebab($attributes['name']);
        return parent::create($attributes); // TODO: Change the autogenerated stub
    }

    public function update($id, array $attributes)
    {
        $attributes['url'] = Str::kebab($attributes['name']);
        return parent::update($id, $attributes); // TODO: Change the autogenerated stub
    }


    public function search(array $data)
    {
        $name = $data['name'] ?? null;
        $url = $data['url'] ?? null;
        $description = $data['description'] ?? null;

        return DB::table($this->table())
            ->where(function($builder) use($name, $url, $description){
                if($name){
                    $builder->where('name', $name);
                }

                if($url){
                    $builder->orWhere('url', $url);
                }

                if($description){
                    $builder->orWhere('description', 'LIKE', "%{$description}%");
                }

            })
            ->orderBy('id', 'desc')
            ->paginate();
    }

    public function totalProductsByCategoryId($id): int
    {
        return $this->db->table('products')->where('category_id', $id)->count();
    }


    protected function table()
    {
        return 'categories';
    }

}
